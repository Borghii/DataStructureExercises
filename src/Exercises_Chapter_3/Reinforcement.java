package Exercises_Chapter_3;


import java.lang.reflect.Array;
import java.util.*;

public class Reinforcement {




}

//R-3.1 Give the next five pseudorandom numbers generated by the process described on
//page 113, with a = 12, b = 5, and n = 100, and 92 as the seed for cur.
class Ex31{
    public static void main(String[] args) {
        int cur = 92;//seed
        int next=0;

        for (int i = 0; i < 5; i++) {
            next = (12*cur +5) % 100;
            cur = next;
            System.out.println("Random: "+cur);
        }
    }
}

//    Write a Java method that repeatedly selects and removes a random entry from an
//    array until the array holds no more entries
class Ex32{

    public static void main(String[] args) {

        long startTime, endTime;
        double durationAlgorithm1;

        startTime = System.nanoTime();

        //----------------------------------------------------

          int [] array = {1, 2, 3, 4, 5};
          remove_entry(array);

        //----------------------------------------------------------

        endTime = System.nanoTime();
        durationAlgorithm1 = (endTime - startTime) / 1e6;
        System.out.println("Duration algorithm: "+durationAlgorithm1);




    }

    public static void remove_entry(int[] a){
        Random rand = new Random();

        for(int i = 0; i < a.length; i++){

            int del = rand.nextInt(a.length-i);

            for(int j = del; j < a.length-i-1; j++){
                // Move the next elements one step backward
                a[j] = a[j+1];
            }
            System.out.println("Primer bucle");
            Arrays.stream(a).forEach(System.out::println);

            a[a.length-i-1] = 0;
        }

    }




    public static <T> void removeAllRandomly(T[] array) {
        // Crear una lista auxiliar a partir del array
        ArrayList<T> list = new ArrayList<>(Arrays.asList(array));
        Random random = new Random();

        // Mientras la lista no esté vacía, seleccionar y eliminar un elemento aleatorio
        while (!list.isEmpty()) {
            int index = random.nextInt(list.size()); // Generar un índice aleatorio
            T removed = list.remove(index); // Eliminar el elemento en el índice aleatorio
            System.out.println("Removed: " + removed);
        }

        System.out.println("Array is empty now.");
    }
}

//The removeFirst method of the SinglyLinkedList class includes a special case to
//reset the tail field to null when deleting the last node of a list (see lines 51 and 52
//of Code Fragment 3.15). What are the consequences if we were to remove those
//two lines from the code? Explain why the class would or would not work with
//such a modification
class Ex35{
//    The only consequence of removing line 51-52 would be that tail would point to some node, even though the list is empty.
//
//    The Class SinglyLinkedList would still function just as before since all the methods whether access or update involving 'last' work same as before
}

class Ex37{
//    R-3.7 Consider the implementation of CircularlyLinkedList.addFirst, in Code Fragment 3.16.
//    The else body at lines 39 and 40 of that method relies on a locally
//    declared variable, newest. Redesign that clause to avoid use of any local variable.
}

class Ex38{
//    R-3.8 Describe a method for finding the middle node of a doubly linked list with header
//    and trailer sentinels by “link hopping,” and without relying on explicit knowledge
//    of the size of the list. In the case of an even number of nodes, report the node
//    slightly left of center as the “middle.” What is the running time of this method?

}
class Ex39{
//    R-3.9 Give an implementation of the size() method for the SingularlyLinkedList class,
//    assuming that we did not maintain size as an instance variable.
}
class Ex310{
//    R-3.10 Give an implementation of the size() method for the CircularlyLinkedList class,
//    assuming that we did not maintain size as an instance variable.
}
class Ex311{
//    R-3.11 Give an implementation of the size() method for the DoublyLinkedList class,
//    assuming that we did not maintain size as an instance variable
}




